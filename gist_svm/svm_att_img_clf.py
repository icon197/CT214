# -*- coding: utf-8 -*-
"""svm_att_img_clf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BwyNHvzEoss4NgVYTjUXCLg0qiq0tgp8

<h3>Import necessary libraries.</h3>
"""

import gist
import numpy as np

from skimage import io

"""<h3>Read the image data into a dictionary.</h3>"""

BASE_DIR = "data_align/"

BASE_NAME = "s"

NUM_LABELS = 40
NUM_IMAGES = 10

# the images are read from files and stored in a dict() structure: dict[label: images]
data = dict()

for label_idx in range(1, NUM_LABELS+1):
    LABEL = BASE_NAME + str(label_idx)
    LABEL_FOLDER = BASE_DIR + LABEL + "/"
    
    imgs = list()
    for img_idx in range(1, NUM_IMAGES+1):
        img_file = LABEL_FOLDER + str(img_idx) + ".pgm"
        img = io.imread(img_file)
        
        # each image data is stored in an array of shape (height, width, num_chanels)
        new_img = np.zeros((160, 160, 3), dtype=np.uint8)
        
        # all the images are gray images.
        new_img[:, :, 0] = img
        new_img[:, :, 1] = img
        new_img[:, :, 2] = img  
        
        # use gist to extract the feature.
        img = gist.extract(new_img)
        
        imgs.append(img)
        
    data[label_idx] = np.array(imgs)

"""<h3>Split data into training and testing sets.</h3>"""

# the first 8 images of each label will be used for training, the rest is for testing.
training_dict, testing_dict = dict(), dict()

for label_idx in range(1, NUM_LABELS+1):
    training_dict[label_idx] = data[label_idx][:8]
    testing_dict[label_idx] = data[label_idx][8:]

# turn image data from dict structure to array-like structure
# image_label: images -> [feature_vector... image_label]
training_data = list()

for label_idx in range(1, NUM_LABELS+1):
    for x in training_dict[label_idx]:
        x = np.append(x, label_idx)
        training_data.append(x)
    
testing_data = list()
for label_idx in range(1, NUM_LABELS+1):
    for x in testing_dict[label_idx]:
        x = np.append(x, label_idx)
        testing_data.append(x)

"""<h3>Split the data into features and labels.</h3>"""

X_train, y_train = np.array(training_data)[:, :-1], np.array(training_data)[:, -1]
X_test, y_test = np.array(testing_data)[:, :-1], np.array(testing_data)[:, -1]

"""<h3>Build the model and report the result.</h3>"""

from sklearn import svm 
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import accuracy_score 

param_grid = [
    {'C': range(10, 15), 'kernel': ['linear']},
    {'C': range(10, 15), 'gamma': ['scale'], 'kernel': ["rbf"]}
]

svc = svm.SVC()
clf = GridSearchCV(svc, param_grid, cv=4)
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

print("Best params: {}".format(clf.best_params_))
print("Best score in cross validation: {}".format(clf.best_score_))
print("Accuracy: {}".format(accuracy_score(y_test, y_pred)))

